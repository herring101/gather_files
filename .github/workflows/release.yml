name: Release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.check_release.outputs.release_exists == 'true' && steps.check_release.outputs.upload_url || steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Get version from tag
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Check if release exists
        id: check_release
        run: |
          RELEASE_ID=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ github.ref_name }}" | \
            jq -r '.id // ""')

          if [ -n "$RELEASE_ID" ] && [ "$RELEASE_ID" != "null" ]; then
            echo "Release already exists for tag ${{ github.ref_name }}"
            echo "release_exists=true" >> $GITHUB_OUTPUT
            echo "release_id=$RELEASE_ID" >> $GITHUB_OUTPUT
            UPLOAD_URL=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID" | \
              jq -r '.upload_url')
            echo "upload_url=$UPLOAD_URL" >> $GITHUB_OUTPUT
          else
            echo "No release exists for tag ${{ github.ref_name }}"
            echo "release_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        id: create_release
        if: steps.check_release.outputs.release_exists != 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

  build:
    needs: create-release
    if: always()
    name: Build and Release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: gather
            asset_name: gather-linux-amd64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact_name: gather
            asset_name: gather-linux-musl-amd64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: gather.exe
            asset_name: gather-windows-amd64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: gather
            asset_name: gather-macos-amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: gather
            asset_name: gather-macos-arm64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: gather
            asset_name: gather-linux-arm64

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Install musl-tools (Linux musl only)
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools

      - name: Install cross-compilation tools (ARM Linux only)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
          asset_name: ${{ matrix.asset_name }}
          asset_content_type: application/octet-stream

  create-installers:
    needs: create-release
    if: always()
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Generate install scripts
        run: |
          # ----- PowerShell (install.ps1) -----
          cat > install.ps1 << 'EOF'
          $ErrorActionPreference = 'Stop'
          $repo = "herring101/gather_files"
          $file = "gather-windows-amd64.exe"
          $releases = "https://api.github.com/repos/$repo/releases"
          Write-Output "Fetching latest release..."
          $tag = (Invoke-WebRequest $releases | ConvertFrom-Json)[0].tag_name
          $download = "https://github.com/$repo/releases/download/$tag/$file"
          $installDir = "$env:LocalAppData\\Programs\\gather"
          $output = "$installDir\\gather.exe"
          if (-not (Test-Path $installDir)) { New-Item -ItemType Directory -Path $installDir -Force | Out-Null }
          Write-Output "Downloading $download..."
          Invoke-WebRequest $download -Out $output
          Write-Output "Installing to $output"
          $currentPath = [Environment]::GetEnvironmentVariable("Path", "Machine")
          if (-not $currentPath.Contains($installDir)) {
              Write-Output "Adding installation directory to system PATH..."
              [Environment]::SetEnvironmentVariable("Path", "$currentPath;$installDir", "Machine")
              $env:Path = "$env:Path;$installDir"
          }
          Write-Output "Installation completed!  Run 'gather' from any terminal."
          EOF

          # ----- Shell (install.sh) -----
          cat > install.sh << 'EOF'
          #!/bin/sh
          REPO="herring101/gather_files"
          RELEASES_URL="https://api.github.com/repos/$REPO/releases"
          case "$(uname -sm)" in
              "Darwin x86_64")   FILE="gather-macos-amd64"   ;;
              "Darwin arm64")    FILE="gather-macos-arm64"   ;;
              "Linux x86_64")    FILE="gather-linux-musl-amd64" ;;
              "Linux aarch64")   FILE="gather-linux-arm64"   ;;
              *) echo "Unsupported platform: $(uname -sm)"; exit 1 ;;
          esac
          echo "Detected binary: $FILE"
          TAG=$(curl -fsSL $RELEASES_URL | grep -o '"tag_name": "[^"]*' | head -n 1 | cut -d'"' -f4)
          DOWNLOAD_URL="https://github.com/$REPO/releases/download/$TAG/$FILE"
          INSTALL_DIR="$HOME/.local/bin"
          mkdir -p "$INSTALL_DIR"
          echo "Downloading gather..."
          curl -fsSL "$DOWNLOAD_URL" -o "$INSTALL_DIR/gather" && chmod +x "$INSTALL_DIR/gather"
          case ":$PATH:" in
              *":$INSTALL_DIR:"*) ;; # already in PATH
              *) echo "export PATH=\"\$PATH:$INSTALL_DIR\"" >> "$HOME/.profile";;
          esac
          echo "Installation completed!  Run 'gather' from any terminal."
          EOF
          chmod +x install.sh

      - name: Upload Install Script (PS)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: install.ps1
          asset_name: install.ps1
          asset_content_type: text/plain

      - name: Upload Install Script (Shell)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: install.sh
          asset_name: install.sh
          asset_content_type: text/plain
